org: heejongahn
app: galpi

service: galpi-server
provider:
    name: aws
    runtime: nodejs10.x
    stage: ${env:STAGE}
    vpc:
        securityGroupIds:
            - ${env:AWS_SECURITY_GROUP_ID}
        subnetIds:
            'Fn::Split':
                - ','
                - ${env:AWS_SUBNET_ID_LIST}
    region: ap-northeast-2
    iamRoleStatements:
        - Effect: Allow
          Action:
              - secretsmanager:GetSecretValue
          Resource: 'arn:aws:secretsmanager:ap-northeast-2:591434487062:secret:${env:STAGE}/*'
        - Effect: Allow
          Action:
              - 'ec2:CreateNetworkInterface'
          Resource: '*'
        - Effect: Allow
          Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
          Resource: 'arn:aws:s3:::${env:AWS_S3_BUCKET}/*'

plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-dotenv-plugin
    - serverless-domain-manager

custom:
    customDomain:
        certificateName: 'galpi.world'
        domainName: 'api.galpi.world'
        basePath: ''
        stage: ${env:STAGE}
        createRoute53Record: true

functions:
    protectedAuthorizer:
        handler: src/server.protectedAuthorizer
    hello:
        handler: src/server.hello
        events:
            - http:
                  path: hello
                  method: get
    test:
        handler: src/server.test
        events:
            - http:
                  path: test
                  method: get
    renewToken:
        handler: src/server.renew
        events:
            - http:
                  path: auth/renew
                  method: post
    registerWithFirebase:
        handler: src/server.registerWithFirebase
        events:
            - http:
                  path: register/firebase
                  method: post
    me:
        handler: src/server.me
        events:
            - http:
                  path: me
                  method: get
                  authorizer: protectedAuthorizer
    getProfile:
        handler: src/server.getProfile
        events:
            - http:
                  path: profile/
                  method: get
                  cors: true
    editProfile:
        handler: src/server.editProfile
        events:
            - http:
                  path: profile/edit
                  method: put
                  authorizer: protectedAuthorizer
    createBook:
        handler: src/server.createBook
        events:
            - http:
                  path: book/create
                  method: post
    createUnreadReview:
        handler: src/server.createUnreadReview
        events:
            - http:
                  path: review/create-unread
                  method: post
                  authorizer: protectedAuthorizer
    legacyCreateReview:
        handler: src/server.legacyCreateReview
        events:
            - http:
                  path: review/create
                  method: post
                  authorizer: protectedAuthorizer
    createReview:
        handler: src/server.createReview
        events:
            - http:
                  path: review/create-review
                  method: post
                  authorizer: protectedAuthorizer
    createRevision:
        handler: src/server.createRevision
        events:
            - http:
                  path: review/create-revision
                  method: post
                  authorizer: protectedAuthorizer
    legacyEditReview:
        handler: src/server.legacyEditReview
        events:
            - http:
                  path: review/edit
                  method: put
                  authorizer: protectedAuthorizer
    editReview:
        handler: src/server.editReview
        events:
            - http:
                  path: review/edit-review
                  method: put
                  authorizer: protectedAuthorizer
    deleteReview:
        handler: src/server.deleteReview
        events:
            - http:
                  path: review/delete
                  method: delete
                  authorizer: protectedAuthorizer
    getReview:
        handler: src/server.getReview
        events:
            - http:
                  path: review/get
                  method: get
                  cors: true
    listReview:
        handler: src/server.listReview
        events:
            - http:
                  path: review/list
                  method: get
    uploadFile:
        handler: src/server.uploadFile
        events:
            - http:
                  path: file/upload
                  method: post
                  authorizer: protectedAuthorizer
    getSignedUrl:
        handler: src/server.getSignedUrl
        events:
            - http:
                  path: file/get-signed-url
                  method: post
                  authorizer: protectedAuthorizer
iamRoleStatements:
    - Effect: Allow
      Action:
          - ssm:GetParameter
      Resource: 'arn:aws:ssm:ap-northeast-2:heejognahn@gmail.com:parameter/*'
